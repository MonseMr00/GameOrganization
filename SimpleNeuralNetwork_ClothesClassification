{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMNmeB//SM6ApkCiSyrH9/x",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MonseMr00/GameOrganization/blob/main/SimpleNeuralNetwork_ClothesClassification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "2iKtSMLGtGGg",
        "outputId": "03f1f13e-0be8-43d6-be6a-b39912c80410"
      },
      "source": [
        "# Monserrat Mora Reyes                                       \n",
        "# ID: 167797\n",
        "\n",
        "# Note: This program must be run in an eviroment compatible with Tensorflow or\n",
        "# it is recommended to run it on Google Collaborate (to avoid the instalation of\n",
        "#  any program).\n",
        "\n",
        "# This is a neural network that classifies images of clothing items into \n",
        "# 10 categories (explained ahead). \n",
        "\n",
        "# We start by imporing TensorFlow and tf.keras, which is a high-level API that will \n",
        "# help us to build and train neural networks in TensorFlow.\n",
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ------------------------ Obtaining the data ------------------------------------#\n",
        "\n",
        "# One of the most important parts of building a neural network is having a good set of \n",
        "# data to train and test the network. For that reason we use Fashion MNIST dataset, it \n",
        "# contains 70,000 images of clothing items of 28x28 pixels. \n",
        "\n",
        "fashion_mnist = tf.keras.datasets.fashion_mnist\n",
        "(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n",
        "\n",
        "# Here we load the arrays that contain the images with their respective labels.\n",
        "# We have two sections 60,000 images are used fot training (train_images, train_labels)\n",
        "# the neural network, 10,000 are used for testing (test_images, test_labels).\n",
        "\n",
        "# The images are 28x28 Numpy arrays with pixel values from 0 to 255. The labes are integers\n",
        "# ranging form 0 to 9 where each number represents a clothing category as follows:\n",
        "# 0 - T-shirt/top\n",
        "# 1 - Trouser\n",
        "# 2 - Pullover\n",
        "# 3 - Dress\n",
        "# 4 - Coat\n",
        "# 5 - Sandal\n",
        "# 6 - Shirt\n",
        "# 7 - Sneaker\n",
        "# 8 - Bag\n",
        "# 9 - Ankle Boot\n",
        "\n",
        "# The names corresponding to the integers in the labes are not included in the dataset, for\n",
        "# that reason we sore them and will make use of them latter.\n",
        "\n",
        "class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
        "               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
        "\n",
        "# Before introduce the values of the image to the neural network we must scale them from\n",
        "# 0 to 1, so we divide them by 255 (range value of the NumPy arrays).\n",
        "\n",
        "train_images = train_images / 255.0\n",
        "test_images = test_images / 255.0\n",
        "\n",
        "\n",
        "# ----------------------- Building the Neural Network --------------------------------#\n",
        "\n",
        "# Now that we have the data we need we can start with the fun part and get to build or \n",
        "# model.\n",
        "\n",
        "# The basic building block of a neural network is the layer. A layer is a series of neurons \n",
        "# that recieve inputs and give outputs. Its function is to process data. Our neural network\n",
        "# has 3 layers.\n",
        "\n",
        "model = tf.keras.Sequential([\n",
        "    tf.keras.layers.Flatten(input_shape=(28, 28)), # 1rst layer\n",
        "    tf.keras.layers.Dense(128, activation='relu'), # 2nd layer\n",
        "    tf.keras.layers.Dense(10)                      # 3rd layer\n",
        "])\n",
        "\n",
        "# They 1st layer transforms the two-dimensional array (28x28) into a one-dimensional array\n",
        "# of 784 pixels (28 * 28 = 784). This layer only gives new format to the input data.\n",
        "# The 2nd layer has 128 neurons fully connected to the 1st layer. \n",
        "# The 3rd layer is the output layer, it has 10 neurons, one for each cloting item.\n",
        "\n",
        "# To comple the model it is fundamental to add some functions that will help with the \n",
        "# learning of the neural network. These funcitons are:\n",
        "# * Loss function - how accurate the model is. Aquiered by comparing the actual results \n",
        "#                 (labeled in the data) with the obtained values.\n",
        "# * Optimizer - way in which the model is updated based on the data and the loss function.\n",
        "# * Metrics - monitor the testing steps.\n",
        "\n",
        "model.compile(optimizer='adam',\n",
        "              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "\n",
        "\n",
        "# ----------------------- Training the Neural Network --------------------------------#\n",
        "\n",
        "# To train the neural network we first need to feed the training data (train_images, \n",
        "# train_labels). The model will make assosiationg of the input data and the results.\n",
        "# Then we will ask the model for predictions using the test data (test_images).\n",
        "# Finally, the predictions will be verified with the labels of the testing data set (test_labels).\n",
        "\n",
        "print('\\nTraining the neural network.')\n",
        "model.fit(train_images, train_labels, epochs=10) # Here we train the neural network.\n",
        "\n",
        "\n",
        "# Here we test the accuracy of the model. It is common to find out that the accuracy during \n",
        "# the training is greater than the accuracy in the test. This happens because the neural network\n",
        "# \"memorizes\" the noise in the images and \"cheats\" on the result. This is called overfitting.\n",
        "\n",
        "test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n",
        "print('\\nTest accuracy:', test_acc)\n",
        "\n",
        "\n",
        "# ----------------------- Testing the Neural Network --------------------------------#\n",
        "\n",
        "# Now our model is trained and we can use it to make predictions. For this section we convert\n",
        "# the model into probabilities since they are easier to interpret.\n",
        "\n",
        "probability_model = tf.keras.Sequential([model, \n",
        "                                         tf.keras.layers.Softmax()])\n",
        "predictions = probability_model.predict(test_images)\n",
        "\n",
        "# Now we set the structure to graph the predictions, the image will show the predicted \n",
        "# percentages for all 10 categories.\n",
        "# Correct predictions are blue and incorrect predictions are red.\n",
        "\n",
        "def plot_image(i, predictions_array, true_label, img):\n",
        "  true_label, img = true_label[i], img[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks([])\n",
        "  plt.yticks([])\n",
        "\n",
        "  plt.imshow(img, cmap=plt.cm.binary)\n",
        "\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "  if predicted_label == true_label:\n",
        "    color = 'blue'\n",
        "  else:\n",
        "    color = 'red'\n",
        "\n",
        "  plt.xlabel(\"{} {:2.0f}% ({})\".format(class_names[predicted_label],\n",
        "                                100*np.max(predictions_array),\n",
        "                                class_names[true_label]),\n",
        "                                color=color)\n",
        "\n",
        "def plot_value_array(i, predictions_array, true_label):\n",
        "  true_label = true_label[i]\n",
        "  plt.grid(False)\n",
        "  plt.xticks(range(10))\n",
        "  plt.yticks([])\n",
        "  thisplot = plt.bar(range(10), predictions_array, color=\"#777777\")\n",
        "  plt.ylim([0, 1])\n",
        "  predicted_label = np.argmax(predictions_array)\n",
        "\n",
        "  thisplot[predicted_label].set_color('red')\n",
        "  thisplot[true_label].set_color('blue')\n",
        "\n",
        "\n",
        "# Finalle we test our model by plotting the first X test images, their predicted labels,\n",
        "# and the true labels.\n",
        "num_rows = 5\n",
        "num_cols = 3\n",
        "num_images = num_rows*num_cols\n",
        "plt.figure(figsize=(2*2*num_cols, 2*num_rows))\n",
        "for i in range(num_images):\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+1)\n",
        "  plot_image(i, predictions[i], test_labels, test_images)\n",
        "  plt.subplot(num_rows, 2*num_cols, 2*i+2)\n",
        "  plot_value_array(i, predictions[i], test_labels)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# ----------------------------------- References --------------------------------------#\n",
        "\n",
        "# The implementation of this neural network was possiblen thanks to the detalied tutorial \n",
        "# found in the TensforFlow webpage: https://www.tensorflow.org/tutorials/keras/classification?hl=en\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Training the neural network.\n",
            "Epoch 1/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.6219 - accuracy: 0.7868\n",
            "Epoch 2/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.3802 - accuracy: 0.8661\n",
            "Epoch 3/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.3353 - accuracy: 0.8775\n",
            "Epoch 4/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.3071 - accuracy: 0.8871\n",
            "Epoch 5/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2896 - accuracy: 0.8929\n",
            "Epoch 6/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2764 - accuracy: 0.8972\n",
            "Epoch 7/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2588 - accuracy: 0.9051\n",
            "Epoch 8/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2533 - accuracy: 0.9077\n",
            "Epoch 9/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2426 - accuracy: 0.9088\n",
            "Epoch 10/10\n",
            "1875/1875 [==============================] - 4s 2ms/step - loss: 0.2309 - accuracy: 0.9136\n",
            "313/313 - 0s - loss: 0.3453 - accuracy: 0.8808\n",
            "\n",
            "Test accuracy: 0.8808000087738037\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 864x720 with 30 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}